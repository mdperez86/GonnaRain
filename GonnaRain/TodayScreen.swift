//
//  TodayScreen.swift
//  GonnaRain
//
//  Created by Maikel David Pérez Gómez on 27-04-23.
//

import SwiftUI

struct TodayScreen: View {
    let locationName: String
    let current: Current
    let hours: [Hour]
    let tomorrow: ForecastDay
    let next7Days: [ForecastDay]
    
    @State var showTomorrowScreen = false
    @State var showNext7DaysScreen = false
    
    var body: some View {
        VStack {
            Spacer()
            
            VStack(spacing: 16) {
                Text("Weather")
                    .font(.title2)
                
                Text(locationName)
                    .font(.largeTitle)
                    .foregroundColor(Color("Heading"))
                
                Text(Date.now.formatted(date: .complete, time: .shortened))
                    .foregroundColor(Color("Text"))
            }
            
            Spacer()
            
            VStack {
                ImageView(imageSrc: current.condition.imageUrl)
                    .frame(width: 128, height: 128)
                
                Text(Measurement(value: current.temp_c, unit: UnitTemperature.celsius).formatted())
                    .font(.system(size: 100))
                    .bold()
                    .foregroundColor(Color("AccentColor"))
            }
            
            Spacer()
            
            HStack {
                Spacer()
                
                VStack(alignment: .leading) {
                    HStack {
                        Image(systemName: "wind")
                        Text(Measurement(value: current.wind_kph, unit: UnitSpeed.kilometersPerHour).formatted())
                    }
                    
                    HStack {
                        Image(systemName: "tornado")
                        Text(Measurement(value: current.gust_kph, unit: UnitSpeed.kilometersPerHour).formatted())
                    }
                }
                
                Spacer()
                
                VStack(alignment: .leading) {
                    HStack {
                        Image(systemName: "humidity")
                        Text((current.humidity / 100).formatted(.percent))
                    }
                    
                    HStack {
                        Image(systemName: "cloud.rain")
                        Text(Measurement(value: current.precip_mm, unit: UnitLength.millimeters).formatted())
                    }
                }
                
                Spacer()
                
                VStack(alignment: .leading) {
                    HStack {
                        Image(systemName: "barometer")
                        Text(Measurement(value: current.pressure_in, unit: UnitPressure.inchesOfMercury).formatted())
                    }
                    
                    HStack {
                        Image(systemName: "rays")
                        Text(current.uv.formatted())
                    }
                }
                
                Spacer()
            }
            .foregroundColor(Color("Text"))
            
            Spacer()
            
            ScrollView(.horizontal, showsIndicators: false) {
                HStack {
                    ForEach(hours) { hour in
                        VStack {
                            Text(hour.localTime.formatted(date: .omitted, time: .shortened))
                            
                            ImageView(imageSrc: hour.condition.imageUrl)
                                .frame(width: 64, height: 64)
                            
                            Text(Measurement(value: hour.temp_c, unit: UnitTemperature.celsius).formatted())
                        }
                        .padding()
                        .background(Color("Card"))
                        .cornerRadius(8)
                    }
                }
                .padding()
                .foregroundColor(Color("Text"))
            }
            
            Spacer()
            
            HStack {
                Spacer()
                Button("Tomorrow") {
                    showTomorrowScreen = true
                }
                Spacer()
                if next7Days.count > 1 {
                    Button("Next \(next7Days.count) days") {
                        showNext7DaysScreen = true
                    }
                    Spacer()
                }
            }
            .padding(.all)
        }
        .sheet(isPresented: $showTomorrowScreen) {
            NavigationView {
                DetailsScreen(title: locationName, subTitle: tomorrow.localDate.formatted(Date.FormatStyle().day().month(.wide)), forecastDay: tomorrow)
            }
        }
        .sheet(isPresented: $showNext7DaysScreen) {
            NavigationView {
                Next7DaysScreen(locationName: locationName, forecastDays: next7Days)
            }
        }
        .scrollContentBackground(Visibility.hidden)
        .background(Color("Background"))
        .frame(maxHeight: .infinity)
    }
}

struct TodayScreen_Previews: PreviewProvider {
    static var previews: some View {
        TodayScreen(locationName: Location.example.name, current: Current.example, hours: ForecastDay.example.hour, tomorrow: ForecastDay.example, next7Days: [ForecastDay.example, ForecastDay.example])
            .environment(\.locale, .init(identifier: "es"))
    }
}














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































